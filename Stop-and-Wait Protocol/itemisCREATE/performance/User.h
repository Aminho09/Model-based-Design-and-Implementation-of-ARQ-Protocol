/** Generated by itemis CREATE code generator. */

#ifndef USER_H_
#define USER_H_

/*!
Forward declaration for the User state machine.
*/
class User;


#include "custom-codes/functions.h"
#include <deque>
#include "generated-lib/sc_types.h"
#include "generated-lib/sc_rxcpp.h"
#include "generated-lib/sc_statemachine.h"
#include "generated-lib/sc_eventdriven.h"
#include "generated-lib/sc_timer.h"
#include <memory>
#include <string.h>
#include <QObject>

/*! \file
Header of the state machine 'user'.
*/


class User : public QObject, public sc::timer::TimedInterface, public std::enable_shared_from_this<sc::timer::TimedInterface>, public sc::EventDrivenInterface
{
	Q_OBJECT
	
	public:
		explicit User(QObject *parent) noexcept;
		
		virtual ~User();
		
		
		
		/*! Enumeration of all states. */
		enum class State
		{
			NO_STATE,
			sender_region_idle,
			sender_region_wait_for_ack,
			receiver_region_receive
		};
		
		/*! The number of states. */
		static constexpr const sc::integer numStates {3};
		static constexpr const sc::integer scvi_sender_region_idle {0};
		static constexpr const sc::integer scvi_sender_region_wait_for_ack {0};
		static constexpr const sc::integer scvi_receiver_region_receive {1};
		
		/*! Enumeration of all events which are consumed. */
		enum class Event
		{
			NO_EVENT,
			send_data,
			send_ack,
			receive_packet,
			reset_sender,
			reset_receiver,
			_te0_sender_region_wait_for_ack_
		};
		
		class EventInstance
		{
			public:
				explicit  EventInstance(Event id) noexcept : eventId(id){}
				virtual ~EventInstance() = default;
				const Event eventId;
		};
		template <typename T>
		class EventInstanceWithValue : public EventInstance
		{
			public:
				explicit  EventInstanceWithValue(Event id, T val) noexcept : 
					EventInstance(id),
					value(val)
				{}
				virtual ~EventInstanceWithValue() = default;
				const T value;
		};
		/*! Get observable for event 'send_packet' of default interface scope. */
		sc::rx::Observable<uint16_t>& getSend_packet() noexcept;
		/*! Get observable for event 'receive_data' of default interface scope. */
		sc::rx::Observable<uint8_t>& getReceive_data() noexcept;
		/*! Get observable for event 'receive_ack' of default interface scope. */
		sc::rx::Observable<uint8_t>& getReceive_ack() noexcept;
		/*! Get observable for event 'dequeue' of default interface scope. */
		sc::rx::Observable<void>& getDequeue() noexcept;
		
		
		
		/*! Can be used by the client code to trigger a run to completion step without raising an event. */
		void triggerWithoutEvent() override;
		
		/*
		 * Functions inherited from StatemachineInterface
		 */
		 void enter() override;
		
		 void exit() override;
		
		/*!
		 * Checks if the state machine is active (until 2.4.1 this method was used for states).
		 * A state machine is active if it has been entered. It is inactive if it has not been entered at all or if it has been exited.
		 */
		 bool isActive() const noexcept override;
		
		
		/*!
		* Checks if all active states are final. 
		* If there are no active states then the state machine is considered being inactive. In this case this method returns false.
		*/
		 bool isFinal() const noexcept override;
		
		/*! 
		 * Checks if member of the state machine must be set. For example an operation callback.
		 */
		bool check() const noexcept;
		
		/*
		 * Functions inherited from TimedStatemachineInterface
		 */
		void setTimerService(std::shared_ptr<sc::timer::TimerServiceInterface> timerService_) noexcept override;
		
		std::shared_ptr<sc::timer::TimerServiceInterface> getTimerService() noexcept override;
		
		void raiseTimeEvent(sc::eventid event) override;
		
		sc::integer getNumberOfParallelTimeEvents() noexcept override;
		
		
		
		/*! Checks if the specified state is active (until 2.4.1 the used method for states was calles isActive()). */
		bool isStateActive(State state) const noexcept;
		
		//! number of time events used by the state machine.
		static const sc::integer timeEventsCount {1};
		
		//! number of time events that can be active at once.
		static const sc::integer parallelTimeEventsCount {1};
		
		
	public slots:
		/*! Slot for the in event 'send_data' that is defined in the default interface scope. */
		void send_data(uint8_t send_data_);
		
		/*! Slot for the in event 'send_ack' that is defined in the default interface scope. */
		void send_ack(uint8_t send_ack_);
		
		/*! Slot for the in event 'receive_packet' that is defined in the default interface scope. */
		void receive_packet(uint16_t receive_packet_);
		
		/*! Slot for the in event 'reset_sender' that is defined in the default interface scope. */
		void reset_sender();
		
		/*! Slot for the in event 'reset_receiver' that is defined in the default interface scope. */
		void reset_receiver();
		
		
	signals:
		/*! Signal representing the out event 'send_packet' that is defined in the default interface scope. */
		void send_packet(uint16_t value);
		
		/*! Signal representing the out event 'receive_data' that is defined in the default interface scope. */
		void receive_data(uint8_t value);
		
		/*! Signal representing the out event 'receive_ack' that is defined in the default interface scope. */
		void receive_ack(uint8_t value);
		
		/*! Signal representing the out event 'dequeue' that is defined in the default interface scope. */
		void dequeue();
		
	
	protected:
		
		
		std::deque<std::unique_ptr<EventInstance>> incomingEventQueue;
		
		std::unique_ptr<EventInstance> getNextEvent() noexcept;
		
		bool dispatchEvent(std::unique_ptr<EventInstance> event) noexcept;
		
		
		
	private:
		User(const User &rhs);
		User& operator=(const User&);
		
		
		
		uint8_t send_cAck {0};
		uint8_t send_tag {1};
		uint16_t send_tData {0};
		uint8_t receive_cAck {0};
		uint8_t receive_tag {1};
		static constexpr const uint8_t timeout {4};
		Functions f {};
		
		
		
		//! the maximum number of orthogonal states defines the dimension of the state configuration vector.
		static const sc::ushort maxOrthogonalStates {2};
		
		std::shared_ptr<sc::timer::TimerServiceInterface> timerService;
		bool timeEvents[timeEventsCount];
		
		
		State stateConfVector[maxOrthogonalStates];
		
		
		
		
		bool isExecuting {false};
		sc::integer stateConfVectorPosition {0};
		
		
		
		// prototypes of all internal functions
		
		sc::integer react(const sc::integer transitioned_before);
		sc::integer sender_region_idle_react(const sc::integer transitioned_before);
		sc::integer sender_region_wait_for_ack_react(const sc::integer transitioned_before);
		sc::integer receiver_region_receive_react(const sc::integer transitioned_before);
		void clearInEvents() noexcept;
		void microStep();
		void runCycle();
		
		
		/*! Sets the value of the variable 'send_cAck' that is defined in the internal scope. */
		void setSend_cAck(uint8_t send_cAck) noexcept;
		/*! Sets the value of the variable 'send_tag' that is defined in the internal scope. */
		void setSend_tag(uint8_t send_tag) noexcept;
		/*! Sets the value of the variable 'send_tData' that is defined in the internal scope. */
		void setSend_tData(uint16_t send_tData) noexcept;
		/*! Sets the value of the variable 'receive_cAck' that is defined in the internal scope. */
		void setReceive_cAck(uint8_t receive_cAck) noexcept;
		/*! Sets the value of the variable 'receive_tag' that is defined in the internal scope. */
		void setReceive_tag(uint8_t receive_tag) noexcept;
		/*! Sets the value of the variable 'f' that is defined in the internal scope. */
		void setF(Functions f) noexcept;
		
		/*! Indicates event 'send_data' of default interface scope is active. */
		bool send_data_raised {false};
		
		/*! Value of event 'send_data' of default interface scope. */
		uint8_t send_data_value {0};
		
		/*! Indicates event 'send_ack' of default interface scope is active. */
		bool send_ack_raised {false};
		
		/*! Value of event 'send_ack' of default interface scope. */
		uint8_t send_ack_value {0};
		
		/*! Indicates event 'receive_packet' of default interface scope is active. */
		bool receive_packet_raised {false};
		
		/*! Value of event 'receive_packet' of default interface scope. */
		uint16_t receive_packet_value {0};
		
		/*! Indicates event 'reset_sender' of default interface scope is active. */
		bool reset_sender_raised {false};
		
		/*! Indicates event 'reset_receiver' of default interface scope is active. */
		bool reset_receiver_raised {false};
		
		/*! Observable for event 'send_packet' of default interface scope. */
		sc::rx::Observable<uint16_t> send_packet_observable = sc::rx::Observable<uint16_t>{};
		
		/*! Observable for event 'receive_data' of default interface scope. */
		sc::rx::Observable<uint8_t> receive_data_observable = sc::rx::Observable<uint8_t>{};
		
		/*! Observable for event 'receive_ack' of default interface scope. */
		sc::rx::Observable<uint8_t> receive_ack_observable = sc::rx::Observable<uint8_t>{};
		
		/*! Observable for event 'dequeue' of default interface scope. */
		sc::rx::Observable<void> dequeue_observable = sc::rx::Observable<void>{};
		
		
		
};




#endif /* USER_H_ */
