/** Generated by itemis CREATE code generator. */

#include "User.h"

/*! \file
Implementation of the state machine 'user'
*/




User::User(QObject *parent) noexcept :
	send_data_raised(false),
	send_data_value
	(0),
	send_ack_raised(false),
	send_ack_value
	(0),
	receive_packet_raised(false),
	receive_packet_value
	(0),
	reset_sender_raised(false),
	reset_receiver_raised(false),
	send_cAck(0),
	send_tag(1),
	send_tData(0),
	receive_cAck(0),
	receive_tag(1),
	f(),
	timerService(nullptr),
	isExecuting(false),
	stateConfVectorPosition(0)
{
	for (sc::ushort state_vec_pos = 0; state_vec_pos < maxOrthogonalStates; ++state_vec_pos)
		stateConfVector[state_vec_pos] = User::State::NO_STATE;
	
	clearInEvents();
}

User::~User()
{
}



std::unique_ptr<User::EventInstance> User::getNextEvent() noexcept
{
	std::unique_ptr<User::EventInstance> nextEvent = 0;

	if(!incomingEventQueue.empty()) {
		nextEvent = std::move(incomingEventQueue.front());
		incomingEventQueue.pop_front();
	}
	
	return nextEvent;
	
}					


template<typename EWV, typename EV>
std::unique_ptr<EWV> cast_event_pointer_type (std::unique_ptr<EV>&& event){
    return std::unique_ptr<EWV>{static_cast<EWV*>(event.release())};
}
	
bool User::dispatchEvent(std::unique_ptr<User::EventInstance> event) noexcept
{
	if(event == nullptr) {
		return false;
	}
								
	switch(event->eventId)
	{
		case User::Event::send_data:
		{
			std::unique_ptr<User::EventInstanceWithValue<uint8_t>> e = cast_event_pointer_type<User::EventInstanceWithValue<uint8_t> >(std::move(event));

			if(e != 0) {
				send_data_value
				 = e->value;
				send_data_raised = true;
			}
			break;
		}
		case User::Event::send_ack:
		{
			std::unique_ptr<User::EventInstanceWithValue<uint8_t>> e = cast_event_pointer_type<User::EventInstanceWithValue<uint8_t> >(std::move(event));

			if(e != 0) {
				send_ack_value
				 = e->value;
				send_ack_raised = true;
			}
			break;
		}
		case User::Event::receive_packet:
		{
			std::unique_ptr<User::EventInstanceWithValue<uint16_t>> e = cast_event_pointer_type<User::EventInstanceWithValue<uint16_t> >(std::move(event));

			if(e != 0) {
				receive_packet_value
				 = e->value;
				receive_packet_raised = true;
			}
			break;
		}
		case User::Event::reset_sender:
		{
			reset_sender_raised = true;
			break;
		}
		case User::Event::reset_receiver:
		{
			reset_receiver_raised = true;
			break;
		}
		
		
		case User::Event::_te0_sender_region_wait_for_ack_:
		{
			timeEvents[static_cast<sc::integer>(event->eventId) - static_cast<sc::integer>(User::Event::_te0_sender_region_wait_for_ack_)] = true;
			break;
		}
		default:
			//pointer got out of scope
			return false;
	}
	//pointer got out of scope
	return true;
}


/*! Slot for the in event 'send_data' that is defined in the default interface scope. */
void User::send_data(uint8_t send_data_) {
	incomingEventQueue.push_back(std::unique_ptr<User::EventInstanceWithValue<uint8_t>>( new User::EventInstanceWithValue<uint8_t>(User::Event::send_data, send_data_)))
	;
	runCycle();
}


/*! Slot for the in event 'send_ack' that is defined in the default interface scope. */
void User::send_ack(uint8_t send_ack_) {
	incomingEventQueue.push_back(std::unique_ptr<User::EventInstanceWithValue<uint8_t>>( new User::EventInstanceWithValue<uint8_t>(User::Event::send_ack, send_ack_)))
	;
	runCycle();
}


/*! Slot for the in event 'receive_packet' that is defined in the default interface scope. */
void User::receive_packet(uint16_t receive_packet_) {
	incomingEventQueue.push_back(std::unique_ptr<User::EventInstanceWithValue<uint16_t>>( new User::EventInstanceWithValue<uint16_t>(User::Event::receive_packet, receive_packet_)))
	;
	runCycle();
}


/*! Slot for the in event 'reset_sender' that is defined in the default interface scope. */
void User::reset_sender() {
	incomingEventQueue.push_back(std::unique_ptr<User::EventInstance>(new User::EventInstance(User::Event::reset_sender)))
	;
	runCycle();
}


/*! Slot for the in event 'reset_receiver' that is defined in the default interface scope. */
void User::reset_receiver() {
	incomingEventQueue.push_back(std::unique_ptr<User::EventInstance>(new User::EventInstance(User::Event::reset_receiver)))
	;
	runCycle();
}


sc::rx::Observable<uint16_t>& User::getSend_packet() noexcept {
	return this->send_packet_observable;
}


sc::rx::Observable<uint8_t>& User::getReceive_data() noexcept {
	return this->receive_data_observable;
}


sc::rx::Observable<uint8_t>& User::getReceive_ack() noexcept {
	return this->receive_ack_observable;
}


sc::rx::Observable<void>& User::getDequeue() noexcept {
	return this->dequeue_observable;
}



bool User::isActive() const noexcept
{
	return stateConfVector[0] != User::State::NO_STATE||stateConfVector[1] != User::State::NO_STATE;
}

/* 
 * Always returns 'false' since this state machine can never become final.
 */
bool User::isFinal() const noexcept
{
	   return false;
}

bool User::check() const noexcept{
	if(timerService == nullptr) {
		return false;
	}
	return true;
}


void User::setTimerService(std::shared_ptr<sc::timer::TimerServiceInterface> timerService_) noexcept
{
	this->timerService = timerService_;
}

std::shared_ptr<sc::timer::TimerServiceInterface> User::getTimerService() noexcept
{
	return timerService;
}

sc::integer User::getNumberOfParallelTimeEvents() noexcept {
	return parallelTimeEventsCount;
}

void User::raiseTimeEvent(sc::eventid evid)
{
	if (evid < timeEventsCount)
	{
		incomingEventQueue.push_back(std::unique_ptr< EventInstance>(new EventInstance(static_cast<User::Event>(evid + static_cast<sc::integer>(User::Event::_te0_sender_region_wait_for_ack_)))));
		runCycle();
	}
}


bool User::isStateActive(State state) const noexcept
{
	switch (state)
	{
		case User::State::sender_region_idle :
		{
			return  (stateConfVector[scvi_sender_region_idle] == User::State::sender_region_idle);
			break;
		}
		case User::State::sender_region_wait_for_ack :
		{
			return  (stateConfVector[scvi_sender_region_wait_for_ack] == User::State::sender_region_wait_for_ack);
			break;
		}
		case User::State::receiver_region_receive :
		{
			return  (stateConfVector[scvi_receiver_region_receive] == User::State::receiver_region_receive);
			break;
		}
		default:
		{
			/* State is not active*/
			return false;
			break;
		}
	}
}

void User::setSend_cAck(uint8_t send_cAck_) noexcept
{
	this->send_cAck = send_cAck_;
}
void User::setSend_tag(uint8_t send_tag_) noexcept
{
	this->send_tag = send_tag_;
}
void User::setSend_tData(uint16_t send_tData_) noexcept
{
	this->send_tData = send_tData_;
}
void User::setReceive_cAck(uint8_t receive_cAck_) noexcept
{
	this->receive_cAck = receive_cAck_;
}
void User::setReceive_tag(uint8_t receive_tag_) noexcept
{
	this->receive_tag = receive_tag_;
}
void User::setF(Functions f_) noexcept
{
	this->f = f_;
}

// implementations of all internal functions
sc::integer User::react(const sc::integer transitioned_before) {
	/* State machine reactions. */
	return transitioned_before;
}

sc::integer User::sender_region_idle_react(const sc::integer transitioned_before) {
	/* The reactions of state idle. */
	sc::integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (0))
	{ 
		if (send_data_raised)
		{ 
			/* Default exit sequence for state idle */
			stateConfVector[0] = User::State::NO_STATE;
			stateConfVectorPosition = 0;
			setSend_tData(f.calculation(send_data_value, send_tag));
			uint16_t send_packet_value = send_tData;
			send_packet_observable.next(send_packet_value);
			emit send_packet(send_packet_value);
			/* 'default' enter sequence for state wait_for_ack */
			/* Entry action for state 'wait_for_ack'. */
			timerService->setTimer(shared_from_this(), 0, ((static_cast<sc::time> (User::timeout)) * 1000), false);
			stateConfVector[0] = User::State::sender_region_wait_for_ack;
			stateConfVectorPosition = 0;
			transitioned_after = 0;
		}  else
		{
			if (reset_sender_raised)
			{ 
				/* Default exit sequence for state idle */
				stateConfVector[0] = User::State::NO_STATE;
				stateConfVectorPosition = 0;
				setSend_cAck(0);
				setSend_tag(1);
				/* 'default' enter sequence for state idle */
				stateConfVector[0] = User::State::sender_region_idle;
				stateConfVectorPosition = 0;
				transitioned_after = 0;
			} 
		}
	} 
	return transitioned_after;
}

sc::integer User::sender_region_wait_for_ack_react(const sc::integer transitioned_before) {
	/* The reactions of state wait_for_ack. */
	sc::integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (0))
	{ 
		if (((send_ack_raised)) && ((f.checkACK(send_ack_value, send_cAck))))
		{ 
			/* Default exit sequence for state wait_for_ack */
			stateConfVector[0] = User::State::NO_STATE;
			stateConfVectorPosition = 0;
			/* Exit action for state 'wait_for_ack'. */
			timerService->unsetTimer(shared_from_this(), 0);
			setSend_cAck(f.resetACK(send_cAck));
			setSend_tag((1 - send_tag));
			dequeue_observable.next();
			emit dequeue();
			/* 'default' enter sequence for state idle */
			stateConfVector[0] = User::State::sender_region_idle;
			stateConfVectorPosition = 0;
			transitioned_after = 0;
		}  else
		{
			if (timeEvents[0])
			{ 
				/* Default exit sequence for state wait_for_ack */
				stateConfVector[0] = User::State::NO_STATE;
				stateConfVectorPosition = 0;
				/* Exit action for state 'wait_for_ack'. */
				timerService->unsetTimer(shared_from_this(), 0);
				uint16_t send_packet_value = send_tData;
				send_packet_observable.next(send_packet_value);
				emit send_packet(send_packet_value);
				timeEvents[0] = false;
				/* 'default' enter sequence for state wait_for_ack */
				/* Entry action for state 'wait_for_ack'. */
				timerService->setTimer(shared_from_this(), 0, ((static_cast<sc::time> (User::timeout)) * 1000), false);
				stateConfVector[0] = User::State::sender_region_wait_for_ack;
				stateConfVectorPosition = 0;
				transitioned_after = 0;
			} 
		}
	} 
	return transitioned_after;
}

sc::integer User::receiver_region_receive_react(const sc::integer transitioned_before) {
	/* The reactions of state receive. */
	sc::integer transitioned_after = transitioned_before;
	if ((transitioned_after) < (1))
	{ 
		if (((receive_packet_raised)) && ((f.checkPacket(receive_packet_value, receive_tag))))
		{ 
			/* Default exit sequence for state receive */
			stateConfVector[1] = User::State::NO_STATE;
			stateConfVectorPosition = 1;
			uint8_t receive_data_value = f.sendData(receive_packet_value);
			receive_data_observable.next(receive_data_value);
			emit receive_data(receive_data_value);
			uint8_t receive_ack_value = f.sendAck(receive_cAck);
			receive_ack_observable.next(receive_ack_value);
			emit receive_ack(receive_ack_value);
			setReceive_cAck(f.nextCAck(receive_cAck));
			setReceive_tag((1 - receive_tag));
			/* 'default' enter sequence for state receive */
			stateConfVector[1] = User::State::receiver_region_receive;
			stateConfVectorPosition = 1;
			react(0);
			transitioned_after = 1;
		}  else
		{
			if (reset_receiver_raised)
			{ 
				/* Default exit sequence for state receive */
				stateConfVector[1] = User::State::NO_STATE;
				stateConfVectorPosition = 1;
				setReceive_cAck(0);
				setReceive_tag(1);
				/* 'default' enter sequence for state receive */
				stateConfVector[1] = User::State::receiver_region_receive;
				stateConfVectorPosition = 1;
				react(0);
				transitioned_after = 1;
			} 
		}
	} 
	/* If no transition was taken */
	if ((transitioned_after) == (transitioned_before))
	{ 
		/* then execute local reactions. */
		transitioned_after = react(transitioned_before);
	} 
	return transitioned_after;
}

void User::clearInEvents() noexcept {
	send_data_raised = false;
	send_ack_raised = false;
	receive_packet_raised = false;
	reset_sender_raised = false;
	reset_receiver_raised = false;
	timeEvents[0] = false;
}

void User::microStep() {
	sc::integer transitioned = -1;
	stateConfVectorPosition = 0;
	switch(stateConfVector[ 0 ])
	{
		case User::State::sender_region_idle :
		{
			transitioned = sender_region_idle_react(transitioned);
			break;
		}
		case User::State::sender_region_wait_for_ack :
		{
			transitioned = sender_region_wait_for_ack_react(transitioned);
			break;
		}
		default:
			/* do nothing */
			break;
	}
	if ((stateConfVectorPosition) < (1))
	{ 
		switch(stateConfVector[ 1 ])
		{
			case User::State::receiver_region_receive :
			{
				receiver_region_receive_react(transitioned);
				break;
			}
			default:
				/* do nothing */
				break;
		}
	} 
}

void User::runCycle() {
	/* Performs a 'run to completion' step. */
	if (isExecuting)
	{ 
		return;
	} 
	isExecuting = true;
	dispatchEvent(getNextEvent());
	do
	{ 
		microStep();
		clearInEvents();
	} while (dispatchEvent(getNextEvent()));
	isExecuting = false;
}

void User::enter() {
	/* Activates the state machine. */
	if (isExecuting)
	{ 
		return;
	} 
	isExecuting = true;
	/* Default enter sequence for statechart user */
	/* 'default' enter sequence for region sender region */
	/* Default react sequence for initial entry  */
	/* 'default' enter sequence for state idle */
	stateConfVector[0] = User::State::sender_region_idle;
	stateConfVectorPosition = 0;
	/* 'default' enter sequence for region receiver region */
	/* Default react sequence for initial entry  */
	/* 'default' enter sequence for state receive */
	stateConfVector[1] = User::State::receiver_region_receive;
	stateConfVectorPosition = 1;
	isExecuting = false;
}

void User::exit() {
	/* Deactivates the state machine. */
	if (isExecuting)
	{ 
		return;
	} 
	isExecuting = true;
	/* Default exit sequence for statechart user */
	/* Default exit sequence for region sender region */
	/* Handle exit of all possible states (of user.sender_region) at position 0... */
	switch(stateConfVector[ 0 ])
	{
		case User::State::sender_region_idle :
		{
			/* Default exit sequence for state idle */
			stateConfVector[0] = User::State::NO_STATE;
			stateConfVectorPosition = 0;
			break;
		}
		case User::State::sender_region_wait_for_ack :
		{
			/* Default exit sequence for state wait_for_ack */
			stateConfVector[0] = User::State::NO_STATE;
			stateConfVectorPosition = 0;
			/* Exit action for state 'wait_for_ack'. */
			timerService->unsetTimer(shared_from_this(), 0);
			break;
		}
		default:
			/* do nothing */
			break;
	}
	stateConfVector[0] = User::State::NO_STATE;
	stateConfVectorPosition = 0;
	/* Default exit sequence for region receiver region */
	/* Handle exit of all possible states (of user.receiver_region) at position 1... */
	switch(stateConfVector[ 1 ])
	{
		case User::State::receiver_region_receive :
		{
			/* Default exit sequence for state receive */
			stateConfVector[1] = User::State::NO_STATE;
			stateConfVectorPosition = 1;
			break;
		}
		default:
			/* do nothing */
			break;
	}
	stateConfVector[1] = User::State::NO_STATE;
	stateConfVectorPosition = 1;
	isExecuting = false;
}

/* Can be used by the client code to trigger a run to completion step without raising an event. */
void User::triggerWithoutEvent() {
	runCycle();
}


